#!/bin/sh

set -euf

print_error() {
  echo "${1}" 1>&2
}

usage() {
  echo "Usage: prepare-deployments <aws> <path_to_config_file>"
}

validate_num_args() {
  # USAGE: validate_num_args [num: int]
  # EXAMPLE: validate_num_args 1

  if [ "${1}" != 2 ]; then
    print_error "ERROR: invalid number of arguments provided"
    print_error "$(usage)"
    exit 1 
  fi
}

validate_infrastructure() {
  # USAGE: validate_infrastructure [infrastructure: string]
  # EXAMPLE: validate_infrastructure aws

  local infrastructure="${1}"

  if [ -z "${infrastructure}" ]; then
    print_error "ERROR: infrastructure should not be empty" 
    print_error "$(usage)"
    exit 1
  fi

  if [ "${infrastructure}" != "aws" ]; then
    print_error "ERROR: invalid infrastructure: ${infrastructure}" 
    print_error "$(usage)"
    exit 1
  fi
}

validate_config_file_path() {
  # USAGE: validate_config_file_path [path: string]
  # EXAMPLE: validate_config_file_path "/path/to/config.json"

  local config_file_path="${1}"

  if [ -z "${config_file_path}" ]; then
    print_error "ERROR: config_file_path should not be empty"
    print_error "$(usage)"
    exit 1
  fi

  if [ ! -f "${config_file_path}" ]; then 
    print_error "ERROR: invalid path to config file: ${config_file_path}" 
    print_error "$(usage)"
    exit 1
  fi
}

determine_deployments_dir() {
  # USAGE: determine_deployments_dir [config_file_path: string] [default_deployments_dir: string]
  # EXAMPLE: determine_deployments_dir "/path/to/config.json" "/path/to/deployments/dir"
  # NOTE: default deployments dir should in most cases be ${cf_deployment_dir}/outputs/manifests

  local config_file_path="${1}"
  local default_deployments_dir="${2}"
  local deployments_dir
  deployments_dir="$( jq -r 'if .["deployments-dir"] then .["deployments-dir"] else "" end' "${config_file_path}")"
  if [ "${deployments_dir}" = "" ]; then
     deployments_dir="${default_deployments_dir}"
     mkdir -p "${default_deployments_dir}"
  fi

  printf "%s" "${deployments_dir}"
}

validate_deployments_dir() {
  # USAGE: validate_deployments_dir [path: string]
  # EXAMPLE: validate_deployments_dir "/path/to/deployments/dir"

  local deployments_dir="${1}"

  if [ ! -d "${deployments_dir}" ]; then
    print_error "deployments-dir \"${deployments_dir}\" must be a directory"
    exit 1
  fi
}

determine_release_version() {
  case "${1}" in
    "integration-latest")
      if [ "${2}" = "cf" ]; then
        printf "create"
        exit 0
      fi

      local version
      version="$(jq -r ".releases[] | select(.name == \"${2}\") | .version" "${3}")"
      printf "%s" "${version}"
      ;;

    "director-latest")
      printf "latest"
      ;;

    *.tgz)
      local version
      version="$(tar -x -O -f "${1}" ./release.MF |  grep -E '^version:' | awk '{print $2};')"
      printf "%s" "${version}"
      ;;

    *)
      printf "create"
      ;;
  esac
}

determine_stemcell_name() {
  case "${1}" in
    *.tgz)
      local name
      name="$(tar -x -O -f "${1}" stemcell.MF |  grep -E '^name:' | awk '{print $2};')"
      printf "%s" "${name}"
      ;;

    *)
      local name
      name="$(jq -r ".stemcells[\"${2}\"].type" "${3}")"
      printf "%s" "${name}"
      ;;
  esac
}

determine_stemcell_version() {
  case "${1}" in
    *.tgz)
      local version
      version="$(tar -x -O -f "${1}" stemcell.MF |  grep -E '^version:' | awk '{print $2};')"
      printf "%s" "${version}"
      ;;

    "integration-latest")
      local version
      version="$(jq -r ".stemcells[\"${2}\"].version" "${3}")"
      printf "%s" "${version}"
      ;;

    "director-latest")
      printf "latest"
      ;;
  esac
}

determine_stemcell_sha1() {
  case "${1}" in
    "director-latest")
      printf ""
    ;;

    *.tgz)
      printf ""
    ;;

    *)
      printf "sha1: \"%s\"" "$(jq -r ".stemcells[\"${2}\"].sha1" "${3}")"
    ;;
  esac
}

determine_stemcell_location() {
  case "${1}" in
     "integration-latest")
      printf "url: \"%s\"" "$(jq -r ".stemcells[\"${2}\"].url" "${3}")"
    ;;

    *.tgz)
      local location
      location="$(filepath "${1}")"
      printf "url: \"%s\"" "${location}"
    ;;

    "director-latest")
      printf ""
    ;;
  esac
}

determine_release_location() {
  case "${1}" in

    "integration-latest")
      printf "%s" "$(jq -r ".releases[] | select(.name == \"${2}\") | .url" "${3}")"
      ;;

    "director-latest")
      printf ""
      ;;

    *)
      filepath "${1}"
      ;;
    esac
}

determine_release_sha1() {
  case "${1}" in

    "integration-latest")
      printf "sha1: %s" "$(jq -r ".releases[] | select(.name == \"${2}\") | .sha1" "${3}")"
      ;;

    *)
      printf ""
      ;;
  esac
}

filepath() {
  printf "file://%s" "${1}"
}

validate_path() {
  local path="${1}"

  if [ "$(echo "${path}" | head -c 1)" != "/" ]; then
    echo "Path ${path} should be absolute." 1>&2
    exit 1
  fi

  if [ ! -e "${path}" ]; then
    echo "File or folder ${path} does not exist" 1>&2
    exit 1
  fi
}

determine_stubs() {
  # USAGE: determine_stubs [path: string]
  # EXAMPLE: determine_stubs "/path/to/config.json"

  local config_file_path="${1}"
  local stubs
  stubs="$(jq -r 'if .stubs then .stubs[] else "" end' "${config_file_path}" )"

  printf "%s" "${stubs}"
}

validate_stubs() {
  # USAGE: validate_stubs [stubs: string]
  # EXAMPLE: validate_stubs "/path/to/stub.yml /path/to/other/stub.yml"

  local stubs="${1}"

  if [ "${stubs}" != "" ]; then
    for var in ${stubs}; do
       if [ "${var}" != "" ]; then
          local var="${var%\"}"
          var="${var#\"}"
          validate_path "${var}"
       fi
    done
  else
    echo "No stubs provided" 1>&2
    exit 1
  fi
}

determine_variant() {
  # USAGE: determine_variant [path: string] [name: string]
  # EXAMPLE: determine_variant "/path/to/config.json" "etcd"

  local config_file_path="${1}"
  local name="${2}"
  local variant
  variant="$(jq -r "if .[\"${name}\"] then .[\"${name}\"] else \"\" end" "${config_file_path}")"

  printf "%s" "${variant:-"integration-latest"}"
}

validate_consul_release_variant() {
  # USAGE: validate_consul_release_variant [variant: string]
  # EXAMPLE: validate_consul_release_variant "/path/to/consul.tar.gz"

  local variant="${1}"

  if [ "${variant}" != "integration-latest" ] && [ "${variant}" != "director-latest" ]; then
    validate_path "${variant}"
  fi
}

validate_etcd_release_variant() {
  # USAGE: validate_etcd_release_variant [variant: string]
  # EXAMPLE: validate_etcd_release_variant "/path/to/etcd.tar.gz"

  local variant="${1}"

  if [ "${variant}" != "integration-latest" ] && [ "${variant}" != "director-latest" ]; then
    validate_path "${variant}"
  fi
}

validate_cf_release_variant() {
  # USAGE: validate_cf_release_variant [variant: string]
  # EXAMPLE: validate_cf_release_variant "/path/to/cf.tar.gz"

  local variant="${1}"

  if [ "${variant}" != "integration-latest" ] ; then
    validate_path "${variant}"
  fi
}

determine_cf_release_location() {
  # USAGE: determine_cf_release_location [variant: string] [blessed_versions_file: string]
  # EXAMPLE: determine_cf_release_location "/path/to/cf.tar.gz" "/cf-deployment"

  local variant="${1}"

  if [ "${variant}" = "integration-latest" ]; then
    local dir
    dir="$(mktemp -d -t cf-XXXXXX)"

    local cf_release_location
    cf_release_location="${dir}/cf-release"

    clone_cf_release "${dir}" "${2}"
  else
    local cf_release_location
    cf_release_location="${variant}"
  fi

  printf "%s" "${cf_release_location}"
}

clone_cf_release() {
  local dir="${1}"
  local git_commit
  if [ ! -f "${2}" ]; then
    print_error "${2} is not a file"
    exit 1
  fi
  git_commit="$(grep commit "${2}" | awk '{gsub(/"/, "", $2); print $2;}')"
  local cwd="${PWD}"

  cd "${dir}"
  git clone https://github.com/cloudfoundry/cf-release.git > /dev/null
  cd cf-release
  git checkout "${git_commit}" > /dev/null
  ./scripts/update > /dev/null
  cd "$cwd"
}

validate_stemcell_variant() {
  # USAGE: validate_stemcell_variant [variant: string]
  # EXAMPLE: validate_stemcell_variant "/path/to/stemcell.tar.gz"

  local variant="${1}"

  if [ "${variant}" != "integration-latest" ] && [ "${variant}" != "director-latest" ]; then
    validate_path "${variant}"
  fi
}

print_stemcells_stub() {
  # USAGE: print_stemcells_stub [name: string] [version: string] [location: string] [sha1: string]
  # EXAMPLE: print_stemcells_stub "stemcell" "1.0.0" "/path/to/stemcell.tar.gz" "8a1aaf746ada2a80fab03a58c91575ffe82885ac"

  local name="${1}"
  local version="${2}"
  local location="${3}"
  local sha1="${4}"

  cat <<EOF
---
meta:
  stemcell:
    name: ${name}
    version: ${version}
    ${location}
    ${sha1}
EOF
}

print_release_stub_header() {
  cat <<EOF
---
releases:
EOF
}

print_release() {
  # USAGE: print_release [release_name: string] [release_version: string] [release_location: string] <release_sha_key_value: string: string>
  # EXAMPLE: print_release "222" "/path/to/cf.tar.gz" "0.15.0" "/path/to/etcd.tar.gz" 'sha: "my-release-sha"'

  local name="${1}"
  local version="${2}"
  local location="${3}"
  local sha1="${4:-}" # optional

  cat <<EOF
- name: ${name}
  version: ${version}
  url: ${location}
EOF

  if [ ! -z "${sha1}" ]; then
  echo "  ${sha1}"
  fi
}

main() {
  local mydir="${1}"
  local infrastructure="${2}"
  local config_file_path="${3}"
  local intermediate_dir="${4}"
  local blessed_versions_file="${5:?"blessed_versions_file not provided"}"

  validate_infrastructure "${infrastructure}"
  validate_config_file_path "${config_file_path}"

  local cf_deployment_dir
  cf_deployment_dir="$(cd "${mydir}/.." && pwd)"
  local deployments_dir
  deployments_dir="$(determine_deployments_dir "${config_file_path}" "${cf_deployment_dir}/outputs/manifests" "${blessed_versions_file}")"

  validate_deployments_dir "${deployments_dir}"

  local stubs
  stubs="$(determine_stubs "${config_file_path}")"

  validate_stubs "${stubs}"

  local etcd_release_variant
  etcd_release_variant="$(determine_variant "${config_file_path}" "etcd" "${blessed_versions_file}")"

  validate_etcd_release_variant "${etcd_release_variant}"

  local consul_release_variant
  consul_release_variant="$(determine_variant "${config_file_path}" "consul" "${blessed_versions_file}")"

  validate_etcd_release_variant "${etcd_release_variant}"

  local etcd_version
  etcd_version="$(determine_release_version "${etcd_release_variant}" 'etcd' "${blessed_versions_file}")"
  local etcd_release_location
  etcd_release_location="$(determine_release_location "${etcd_release_variant}" 'etcd' "${blessed_versions_file}")"
  local etcd_release_sha1
  etcd_release_sha1="$(determine_release_sha1 "${etcd_release_variant}" 'etcd' "${blessed_versions_file}")"

  local consul_version
  consul_version="$(determine_release_version "${consul_release_variant}" 'consul' "${blessed_versions_file}")"
  local consul_release_location
  consul_release_location="$(determine_release_location "${consul_release_variant}" 'consul' "${blessed_versions_file}")"
  local consul_release_sha1
  consul_release_sha1="$(determine_release_sha1 "${consul_release_variant}" 'consul' "${blessed_versions_file}")"

  local cf_release_variant
  cf_release_variant="$(determine_variant "${config_file_path}" "cf" "${blessed_versions_file}")"

  validate_cf_release_variant "${cf_release_variant}"

  local cf_version
  cf_version="$(determine_release_version "${cf_release_variant}" "cf" "${blessed_versions_file}")"
  local cf_release_location
  cf_release_location="$(determine_cf_release_location "${cf_release_variant}" "${blessed_versions_file}")"
  local cf_release_filepath
  cf_release_filepath="$(filepath "${cf_release_location}")"

  local stemcell_variant
  stemcell_variant="$(determine_variant "${config_file_path}" "stemcell" "${blessed_versions_file}")"

  validate_stemcell_variant "${stemcell_variant}"

  local stemcell_name
  stemcell_name="$(determine_stemcell_name "${stemcell_variant}" "${infrastructure}" "${blessed_versions_file}")"
  local stemcell_version
  stemcell_version="$(determine_stemcell_version "${stemcell_variant}" "${infrastructure}" "${blessed_versions_file}")"
  local stemcell_location
  stemcell_location="$(determine_stemcell_location "${stemcell_variant}" "${infrastructure}" "${blessed_versions_file}")"
  local stemcell_sha1
  stemcell_sha1="$(determine_stemcell_sha1 "${stemcell_variant}" "${infrastructure}" "${blessed_versions_file}")"

  local intermediate_dir="${intermediate_dir}"
  mkdir -p "${intermediate_dir}"

  print_stemcells_stub \
    "${stemcell_name}" \
    "${stemcell_version}" \
    "${stemcell_location}" \
    "${stemcell_sha1}" \
    > "${intermediate_dir}/stemcells.yml" 

  {
    print_release_stub_header

    print_release \
      "cf" \
      "${cf_version}" \
      "${cf_release_filepath}"

    print_release \
      "etcd" \
      "${etcd_version}" \
      "${etcd_release_location}" \
      "${etcd_release_sha1}"

    print_release \
      "consul" \
      "${consul_version}" \
      "${consul_release_location}" \
      "${consul_release_sha1}"
  } > "${intermediate_dir}/releases.yml"

  if [ "${infrastructure}" = "bosh-lite" ]; then
    infrastructure="warden"
  fi

  local templates_dir="${cf_deployment_dir}/templates"

  # https://github.com/koalaman/shellcheck/wiki/SC2086
  # shellcheck disable=2086
  "${cf_release_location}/scripts/generate_deployment_manifest" \
    "${infrastructure}" \
    "${intermediate_dir}/releases.yml" \
    "${intermediate_dir}/stemcells.yml" \
    "${templates_dir}/job_templates.yml" \
    ${stubs} \
     > "${deployments_dir}/cf.yml"
}

if [ "$(basename "${0}")" = "prepare-deployments" ]; then
  validate_num_args $#

  if [ ! -z "${CF_DEPLOYMENT_TRACE:-}" ]; then
    set -x
  fi

  my_dir="$( cd "$( dirname "${0}" )" && pwd )"
  base_dir="$( cd "${my_dir}/.." && pwd )"

  blessed_versions_file="${base_dir}/blessed_versions.json"

  main "$(cd "$(dirname "$0")" && pwd)" "$1" "$2" "$(mktemp -d -t intermediate-XXXXXX)" "${blessed_versions_file}"
fi

