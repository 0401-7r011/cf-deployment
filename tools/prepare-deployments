#!/bin/sh

set -eux

DEPLOYMENTS_DIR=$( cat $2 | jq -r '.["deployments-dir"]')

if [ ! -d $DEPLOYMENTS_DIR ]; then
  echo "deployments-dir must be a directory"
  exit 1
fi

pushd $(dirname $0)
   TOOLS_DIR=$(pwd)
popd

determine_version() {
  case ${1} in

    "integration-latest")
        cat blessed_versions.json | jq -r '.releases' | grep version | awk '{gsub(/"/, "", $2); gsub(/,/, "", $2); print $2;}'
      ;;
    "director-latest")
      echo "latest"
      ;;

    *.tgz)
      echo $(tar -x -O -f ${1} ./release.MF |  grep -E '^version:' | awk '{print $2};')
      ;;

    *)
      echo "create"
      ;;
    esac
}

determine_release_location() {
  case ${1} in

    "integration-latest")
        cat blessed_versions.json | jq -r '.releases' | grep url | awk '{print $2;}'
      ;;

    "director-latest")
      echo ""
      ;;

    *.tgz)
      echo "file://${1}"
      ;;

    *)
      if [ "${1:0:1}" != "/" ]; then
        exit 1
      fi
      echo "file://${1}"
      ;;
    esac
}

determine_cf_release_location() {
  if [ ${1} == "integration-latest" ]; then
    git_commit=$(cat ${TOOLS_DIR}/../blessed_versions.json | grep commit | awk '{gsub(/"/, "", $2); print $2;}')
    dir=`mktemp -d -t cf-`
    pushd ${dir} > /dev/null
       git clone https://github.com/cloudfoundry/cf-release.git > /dev/null
       pushd cf-release > /dev/null
         git checkout ${git_commit} > /dev/null
         ./scripts/update > /dev/null
         echo "file://${dir}/cf-release"
       popd > /dev/null
     popd > /dev/null
  else
    determine_release_location ${1}
  fi
}

determine_cf_release_scheme() {
  if [ ${1} == 'integration-latest' ]; then
    echo 'path'
  else
    echo 'url'
  fi
}

etcd_release_thing=$( cat $2 | jq -r '.etcd' )
if [ ${etcd_release_thing} == "" ] || [ ${etcd_release_thing} == "null" ]; then
  etcd_release_thing="integration-latest"
fi

etcd_version=$(determine_version ${etcd_release_thing})
etcd_release_location=$(determine_release_location ${etcd_release_thing})

cf_release_thing=$( cat $2 | jq -r '.cf' )
if [ ${cf_release_thing} == "" ] || [ ${cf_release_thing} == "null" ]; then
  cf_release_thing="integration-latest"
fi

cf_version=$(determine_version ${cf_release_thing})
cf_release_location=$(determine_cf_release_location ${cf_release_thing})
cf_release_scheme=$(determine_cf_release_scheme ${cf_release_thing})

cat > $DEPLOYMENTS_DIR/releases.yml <<EOT
---
releases:
  - name: cf
    version: ${cf_version}
    ${cf_release_scheme}: ${cf_release_location}
  - name: etcd
    version: ${etcd_version}
    url: ${etcd_release_location}
EOT

cat $DEPLOYMENTS_DIR/releases.yml
# cat > ${DEPLOYMENTS_DIR}/release.yml <<EOF
# ---
# releases:
#   - name: cf
#     version: ${CF_RELEASE_VERSION}
#     ${CF_RELEASE_SCHEME}: ${CF_RELEASE_URL}
#   - name: etcd
#     version: ${ETCD_RELEASE_VERSION}
#     ${ETCD_RELEASE_LOCATION}
#     ${ETCD_SHA1}
#   - name: consul
#     version: latest 
# EOF


###################################################################
#### HERE THAR BE DRAGONS #########################################
###################################################################

# pushd $(dirname $0)
#   TOOLS_DIR=$(pwd)
# popd

# INFRASTRUCTURE=$1

# if [ "$#" -lt "1" ]; then
#   echo "USAGE: prepare-deployments INFRASTRUCTURE [path-to-config-file]"
#   exit 1
# fi

# #if [ "$infrastructure" != "aws" ]; then
# #  echo "AWS is the only supported infrastructure currently."
# #  exit 1
# #fi

# CONFIG_PATH=$2

# #create variables with default values
# CF_RELEASE="integration-latest"
# ETCD_RELEASE="integration-latest"
# CONSUL_RELEASE="integration-latest"
# STEMCELL_RELEASE="integration-latest"
# STUBS=""
# DEPLOYMENTS_DIR="./outputs/manifests"

# #parse json and replace default values
# TEMP=$(cat ${CONFIG_PATH} | jq -r .cf)
# if [ "${TEMP}" != "" ]; then
#   if [[ "${TEMP}" == ~* ]]; then
#     echo "Please specify absolute path for cf release path"
#     exit 1
#   else
#     CF_RELEASE=${TEMP}
#   fi
# fi

# TEMP=$(cat ${CONFIG_PATH} | jq -r .etcd)
# if [ "${TEMP}" != "" ]; then
#   if [[ "${TEMP}" == ~* ]]; then
#     echo "Please specify absolute path for etcd release path"
#     exit 1
#   else
#     ETCD_RELEASE=${TEMP}
#   fi
# fi


# TEMP=$(cat ${CONFIG_PATH} | jq -r .stemcell)
# if [ "${TEMP}" != "" ]; then
#   if [[ "${TEMP}" == ~* ]]; then
#     echo "Please specify absolute path for stemcell"
#     exit 1
#   else
#     STEMCELL_RELEASE=${TEMP}
#   fi
# fi


# TEMP=$(cat ${CONFIG_PATH} | jq -r .stubs[])
# TEMP=(${TEMP})
# for var in "${TEMP[@]}"
# do
#   if [ "${var}" != "" ]; then
#     STUBS="${STUBS} ${var}"
#     var="${var%\"}"
#     var="${var#\"}"
#     if [[ "${var}" == ~* ]]; then
#       echo "Please specify absolute path for every stub"
#       exit 1
#     fi
#   fi
# done

# # MAKE SURE THAT CF RELEASE ALSO SUPPORTS URLS AND DIRECTOR LATEST
# if [ -d "$CF_RELEASE" ]; then
#   CF_RELEASE_VERSION="create"
#   CF_RELEASE_URL="file://${CF_RELEASE}"
#   CF_RELEASE_SCHEME="path"
# elif [ "$CF_RELEASE" = "integration-latest" ]; then
#   GIT_COMMIT=$(cat ${TOOLS_DIR}/../blessed_versions.yml | grep commit | awk '{print $2;}')
#   dir=`mktemp -d -t cf-`
#   pushd ${dir} 
#     git clone https://github.com/cloudfoundry/cf-release.git
#     pushd cf-release
#       git checkout $GIT_COMMIT
#       ./scripts/update
#       CF_RELEASE_VERSION="create"
#       CF_RELEASE_URL="file://${dir}/cf-release"
#       CF_RELEASE_SCHEME="path"
#       CF_RELEASE="${dir}/cf-release"
#     popd
#   popd
# elif [ -e "$CF_RELEASE" ]; then
#   # ETCD_VERSION=$(tar -x -O -f ${ETCD_RELEASE} ./release.MF | grep -E '^version:' | grep -o -E "[0-9.]*[0-9]")
#   # ETCD_RELEASE_LOCATION="path: file://${ETCD_RELEASE}"
#   echo "this is fine, we'll just use this tarball"
# else
#   echo "Invalid cf-release configuration. CF-Release must be the file path to cf-release or integration-latest"
#   exit 1
# fi

# if [ -d $ETCD_RELEASE ]; then
#   ETCD_RELEASE_VERSION="create"
#   ETCD_RELEASE_LOCATION="path: file://${ETCD_RELEASE}"
# elif [ -e $ETCD_RELEASE ]; then
#   ETCD_VERSION=$(tar -x -O -f ${ETCD_RELEASE} ./release.MF | grep -E '^version:' | grep -o -E "[0-9.]*[0-9]")
#   ETCD_RELEASE_LOCATION="path: file://${ETCD_RELEASE}"
# elif [ "${ETCD_RELEASE}" == "director-latest" ]; then
#   ETCD_RELEASE_VERSION="latest"
#   ETCD_RELEASE_LOCATION=""
# elif [ "${ETCD_RELEASE}" == "integration-latest" ]; then
#   ETCD_RELEASE_VERSION=$(grep etcd: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep version: | awk '{print $2};')
#   ETCD_RELEASE_LOCATION="url: $(grep etcd: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep url: | awk '{print $2};')"
#   ETCD_SHA1="sha1: $(grep etcd: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep sha1: | awk '{print $2};')"
# else 
#   echo "Invalid etcd release configuration. Etcd must be a tarball, consul-release folder, integration-latest or director-latest"
#   exit 1
# fi

# if [ -d $CONSUL_RELEASE ]; then
#   CONSUL_RELEASE_VERSION="create"
#   CONSUL_RELEASE_LOCATION="path: file://${CONSUL_RELEASE}"
# elif [ -e $CONSUL_RELEASE ]; then
#   CONSUL_VERSION=$(tar -x -O -f ${CONSUL_RELEASE} ./release.MF | grep -E '^version:' | grep -o -E "[0-9.]*[0-9]")
#   CONSUL_RELEASE_LOCATION="path file://${CONSUL_RELEASE}"
# elif [ "${CONSUL_RELEASE}" == "director-latest" ]; then
#   CONSUL_RELEASE_VERSION="latest"
#   CONSUL_RELEASE_LOCATION=""
# elif [ "${CONSUL_RELEASE}" == "integration-latest" ]; then
#   echo "" #skipped for now. There is no consul release in blessed file.
#   #CONSUL_RELEASE_VERSION=$(grep consul: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep version: | awk '{print $2};')
#   #CONSUL_RELEASE_LOCATION="url: $(grep consul: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep url: | awk '{print $2};')"
#   #CONSUL_SHA1="sha1: $(grep consul: -A3 ${TOOLS_DIR}/../blessed_versions.yml | grep sha1: | awk '{print $2};')"
# else 
#   echo "Invalid consul release configuration. Consul must be a tarball, consul-release folder, integration-latest or director-latest "
#   exit 1
# fi


# # DON'T FORGET TO CONSIDER STEMCELLS THAT EXIST AT REMOTE URLS

# if [ -e $STEMCELL_RELEASE ]; then
# cat > ${DEPLOYMENTS_DIR}/stemcell.yml <<EOF
# ---
# meta:
#   stemcell:
#     name: $(tar -x -O -f ${STEMCELL_RELEASE} ./stemcell.MF | grep -E '^name:' -m1 | awk '{print $2};')
#     version: $(tar -x -O -f ${STEMCELL_RELEASE} ./stemcell.MF | grep -E '^version:' | grep -o -E "[0-9.]*[0-9]")
#     sha1: $(tar -x -O -f ${STEMCELL_RELEASE} ./stemcell.MF | grep -E '^sha1:' | awk '{print $2};')
#     path: file://${STEMCELL_RELEASE}
# EOF

# elif [ "$STEMCELL_RELEASE" == "integration-latest" ]; then
# cat > ${DEPLOYMENTS_DIR}/stemcell.yml <<EOF
# ---
# meta:
#   stemcell:
#     name: $(grep stemcell: -A5 ${TOOLS_DIR}/../blessed_versions.yml | grep 'type:' | awk '{print $2};')
#     version: $(grep stemcell: -A5 ${TOOLS_DIR}/../blessed_versions.yml | grep version: | awk '{print $2};')
#     url: $(grep stemcell: -A5 ${TOOLS_DIR}/../blessed_versions.yml | grep url: | awk '{print $2};')
#     sha1: $(grep stemcell: -A5 ${TOOLS_DIR}/../blessed_versions.yml | grep sha1: | awk '{print $2};')
# EOF

# elif [ "$STEMCELL_RELEASE" == "director-latest" ]; then
#   continue
# else
#   echo "Invalid stemcell configuration. The stemcell must be a tarball, integration-latest or director-latest"
#   exit 1
# fi

# cat > ${DEPLOYMENTS_DIR}/release.yml <<EOF
# ---
# releases:
#   - name: cf
#     version: ${CF_RELEASE_VERSION}
#     ${CF_RELEASE_SCHEME}: ${CF_RELEASE_URL}
#   - name: etcd
#     version: ${ETCD_RELEASE_VERSION}
#     ${ETCD_RELEASE_LOCATION}
#     ${ETCD_SHA1}
#   - name: consul
#     version: latest 
# EOF

# ${TOOLS_DIR}/../scripts/generate_deployment_manifest ${INFRASTRUCTURE} ${CF_RELEASE} ${DEPLOYMENTS_DIR}/release.yml ${DEPLOYMENTS_DIR}/stemcell.yml ${STUBS} > "${DEPLOYMENTS_DIR}/cf-deployment-manifest.yml"
