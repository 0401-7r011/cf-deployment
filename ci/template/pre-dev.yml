#@ load("@ytt:data", "data")

#@ def delete_deployment(env):
task: delete-deployment
file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
input_mapping:
  bbl-state: relint-envs
params:
  BBL_STATE_DIR: #@ "environments/test/{}/bbl-state".format(env)
#@ end

#@ def manage_gcp_dns(action):
task: #@ action + "-gcp-dns"
file: runtime-ci/tasks/manage-gcp-dns/task.yml
input_mapping:
  bbl-state: relint-envs
params:
  BBL_STATE_DIR: environments/test/pre-dev/bbl-state
  GCP_DNS_SERVICE_ACCOUNT_KEY: ((concourse_gcp_service_account_json))
  GCP_DNS_ZONE_NAME: test-relint-rocks
  GCP_DNS_RECORD_SET_NAME: pre-dev.test.relint.rocks
  ACTION: #@ action
#@ end

#@ def bbl_up():
task: bbl-up
file: cf-deployment-concourse-tasks/bbl-up/task.yml
params:
  BBL_STATE_DIR: environments/test/pre-dev/bbl-state
  BBL_IAAS: gcp
  BBL_ENV_NAME: pre-dev
  BBL_GCP_SERVICE_ACCOUNT_KEY: environments/test/pre-dev/google_account_creds.json
  BBL_GCP_REGION: us-central1
  BBL_LB_CERT: ((pre_dev_cf_lb_cert.certificate))
  BBL_LB_KEY: ((pre_dev_cf_lb_cert.private_key))
  LB_DOMAIN: pre-dev.test.relint.rocks
input_mapping:
  bbl-state: relint-envs
  bbl-config: relint-envs
ensure:
  put: relint-envs
  params:
    repository: updated-bbl-state
    rebase: true
#@ end

#@ def bbl_down():
task: bbl-down
file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
input_mapping:
  bbl-state: relint-envs
params:
  BBL_GCP_SERVICE_ACCOUNT_KEY: environments/test/pre-dev/google_account_creds.json
  BBL_STATE_DIR: environments/test/pre-dev/bbl-state
ensure:
  put: relint-envs
  params:
    repository: updated-bbl-state
    rebase: true
#@ end

---
groups:
- name: update-releases
  jobs:
  #@ for r in data.values.baseReleases:
  - #@ "update-" + r.name
  #@ end
- name: update-ops-releases
  jobs:
  #@ for r in data.values.opsReleases:
  - #@ "update-" + r.name
  #@ end
- name: cleanup
  jobs:
  - delete-stale-branches

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest


resources:
#@ for r in data.values.baseReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository

#@ end

#@ for r in data.values.opsReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository

#@ end

- name: cf-deployment-release-candidate
  type: git
  source:
    branch: release-candidate
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((cf_deployment_readwrite_deploy_key.private_key))

- name: cf-deployment-develop
  type: git
  source:
    branch: pre-dev-test
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((cf_deployment_readwrite_deploy_key.private_key))

- name: cf-deployment-all-branches
  type: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((cf_deployment_readwrite_deploy_key.private_key))
    ignore_paths:
    - .envrc
    - .overcommit.yml
    - ISSUE_TEMPLATE.md
    - PULL_REQUEST_TEMPLATE.md
    - ci/**
    - texts/**

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: runtime-ci
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: relint-envs
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/relint-envs.git
    private_key: ((hagrid_env_readwrite_deploy_key.private_key))

- name: relint-team
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/relint-team.git
    private_key: ((runtime_ci_private_read_deploy_key.private_key))

#@ for r in data.values.baseReleases:
- name: #@ r.name + "-release-gcs"
  type: gcs-resource
  source:
    bucket: cf-deployment-compiled-releases
    json_key: ((concourse_gcp_service_account_json))
    regexp: #@ r.name + "-[^-]+-ubuntu-xenial-[^-]+-(\d+)-(\d+)-(\d+).*\.tgz"

- name: #@ r.name + "-component-bump-logs-gcs"
  type: gcs-resource
  source:
    bucket: component-bump-logs
    json_key: ((greengrass_gcp_service_account_json))
    regexp: #@ r.name + "/cf-(\d+)-(\d+)-(\d+)\.tgz"

#@ end

- name: slack-alert
  type: slack-notification
  source:
    url: ((relint_slack_incoming_webhook))

- name: daily
  type: time
  source:
    interval: 24h

jobs:
#@ for r in data.values.baseReleases:
- name: #@ "update-" + r.name
  serial_groups:
  - update-release
  public: true
  plan:
  - aggregate:
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
    - get: cf-deployment-release-candidate
    - get: cf-deployment-develop
    - get: stemcell
      params:
        tarball: false
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
    - get: relint-team
  - task: #@ "update-release-{}-release-candidate".format(r.name)
    file: runtime-ci/tasks/update-single-manifest-release/task.yml
    input_mapping:
      cf-deployment: cf-deployment-release-candidate
      release: #@ r.name + "-release"
    output_mapping:
      updated-cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
    params:
      RELEASE_NAME: #@ r.name
  - task: #@ "update-additional-ops-files-{}-release-candidate".format(r.name)
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      original-ops-file: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
      release: #@ r.name + "-release"
    output_mapping:
      updated-ops-file: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
    params:
      RELEASE_NAME: #@ r.name
  - do:
    - #@ bbl_up()
    - #@ manage_gcp_dns("add")
    - do:
      - task: deploy-cf
        file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          ops-files: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          vars-files: relint-envs
        params:
          BBL_STATE_DIR: environments/test/pre-dev/bbl-state
          SYSTEM_DOMAIN: pre-dev.test.relint.rocks
          OPS_FILES: |
            operations/experimental/fast-deploy-with-downtime-and-danger.yml
          REGENERATE_CREDENTIALS: false
          BOSH_DEPLOY_ARGS: "--parallel 50"
      - task: run-errand-smoke-tests
        file: cf-deployment-concourse-tasks/run-errand/task.yml
        input_mapping:
          bbl-state: relint-envs
        params:
          BBL_STATE_DIR: environments/test/pre-dev/bbl-state
          ERRAND_NAME: smoke-tests
      - task: #@ "export-compiled-release-" + r.name
        file: runtime-ci/tasks/export-compiled-release-tarball/task.yml
        input_mapping:
          bbl-state: relint-envs
          manifest: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
        params:
          BBL_STATE_DIR: environments/test/pre-dev/bbl-state
          RELEASE_NAME: #@ r.name
      - task: #@ "update-release-{}-develop".format(r.name)
        file: runtime-ci/tasks/update-single-manifest-release/task.yml
        input_mapping:
          cf-deployment: cf-deployment-develop
          release: #@ r.name + "-release"
        output_mapping:
          updated-cf-deployment: #@ "updated-cf-deployment-{}-develop".format(r.name)
        params:
          RELEASE_NAME: #@ r.name
      - task: #@ "update-additional-ops-files-{}-develop".format(r.name)
        file: runtime-ci/tasks/update-single-opsfile-release/task.yml
        input_mapping:
          original-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
          release: #@ r.name + "-release"
        output_mapping:
          updated-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
        params:
          RELEASE_NAME: #@ r.name
      - task: #@ "update-compiled-releases-ops-file-{}-develop".format(r.name)
        file: runtime-ci/tasks/update-single-compiled-release/task.yml
        input_mapping:
          original-compiled-releases-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
          release: #@ r.name + "-release"
        output_mapping:
          updated-compiled-releases-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
        params:
          RELEASE_NAME: #@ r.name
          ORIGINAL_OPS_FILE_PATH: operations/use-compiled-releases.yml
          UPDATED_OPS_FILE_PATH: operations/use-compiled-releases.yml
      on_success:
        do:
        - put: #@ r.name + "-release-gcs"
          params:
            file: compiled-release-tarball/*.tgz
            predefined_acl: publicRead
        - put: cf-deployment-develop
          params:
            rebase: true
            repository: #@ "updated-cf-deployment-{}-develop".format(r.name)
      on_failure:
        do:
        - task: push-to-release-branch
          file: runtime-ci/tasks/push-to-release-branch/task.yml
          input_mapping:
            updated-cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
            release: #@ r.name + "-release"
          params:
            DEPLOY_KEY: ((cf_deployment_readwrite_deploy_key.private_key))
            RELEASE_NAME: #@ r.name
        - task: retrieve-bosh-logs
          file: runtime-ci/tasks/retrieve-bosh-logs/task.yml
          input_mapping:
            bbl-state: relint-envs
          params:
            BBL_STATE_DIR: environments/test/pre-dev/bbl-state
        - put: #@ r.name + "-component-bump-logs-gcs"
          params:
            file: bosh-logs/cf-*.tgz
        ensure:
          do:
          - task: create-slack-message
            file: runtime-ci/tasks/create-slack-message/task.yml
            input_mapping:
              release: #@ r.name + "-release"
            params:
              RELEASE_NAME: #@ r.name
              REPOSITORY: #@ r.repository
              BOSH_LOGS_PREFIX: #@ "https://storage.cloud.google.com/component-bump-logs/" + r.name
          - put: slack-alert
            params:
              #! TODO(cdutra, webdave): Uncomment following line when we go live
              #! channel_file: slack-message/channel.txt
              text_file: slack-message/message.txt
              username: "Release Integration"
              icon_emoji: ":cloudfoundrylogo:"
    ensure:
      do:
      - #@ delete_deployment("pre-dev")
      - #@ manage_gcp_dns("remove")
      - #@ bbl_down()
#@ end

#@ for r in data.values.opsReleases:
- name: #@ "update-" + r.name
  serial_groups:
  - update-release
  public: true
  plan:
  - aggregate:
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
    - get: cf-deployment-release-candidate
    - get: cf-deployment-develop
    - get: stemcell
      params:
        tarball: false
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
  - task: #@ "update-release-{}-release-candidate".format(r.name)
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      release: #@ r.name + "-release"
      original-ops-file: cf-deployment-release-candidate
    output_mapping:
      updated-ops-file: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
    params:
      RELEASE_NAME: #@ r.name
  - do:
    - #@ bbl_up()
    - #@ manage_gcp_dns("add")
    - do:
      - task: deploy-cf
        file: runtime-ci/tasks/bosh-deploy-with-first-ops/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          ops-files: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          vars-files: relint-envs
        params:
          BBL_STATE_DIR: environments/test/pre-dev/bbl-state
          SYSTEM_DOMAIN: pre-dev.test.relint.rocks
          OPS_FILES: |
            operations/experimental/fast-deploy-with-downtime-and-danger.yml
            operations/use-compiled-releases.yml
          REGENERATE_CREDENTIALS: false
          BOSH_DEPLOY_ARGS: "--parallel 50"
      - task: #@ "update-release-{}-develop".format(r.name)
        file: runtime-ci/tasks/update-single-opsfile-release/task.yml
        input_mapping:
          release: #@ r.name + "-release"
          original-ops-file: cf-deployment-develop
        output_mapping:
          updated-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
        params:
          RELEASE_NAME: #@ r.name
      - put: cf-deployment-develop
        params:
          rebase: true
          repository: #@ "updated-cf-deployment-{}-develop".format(r.name)
    ensure:
      do:
      - #@ delete_deployment("pre-dev")
      - #@ manage_gcp_dns("remove")
      - #@ bbl_down()
#@ end

- name: delete-stale-branches
  public: true
  plan:
  - aggregate:
    - get: cf-deployment-all-branches
    - get: runtime-ci
    - get: daily
      trigger: true
  - task: delete-stale-branches
    file: runtime-ci/tasks/validate-branch-freshness/task.yml
    input_mapping:
      repo: cf-deployment-all-branches
    params:
      BRANCH_REGEXP: "update-.*-release-.*"
      MONTHS: 1
      DELETE_STALE_BRANCHES: true
      DEPLOY_KEY: ((cf_deployment_readwrite_deploy_key.private_key))
